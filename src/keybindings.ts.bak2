export function Keybindings(key: any, mods: any, keycodes: any, X: any, root: number, clients: any, resolution: number[], variables: any, DestroyWindow: any, ChangeFocus: any, Tile: any, IncMasters: any, ChangeWorkspace: any, MoveWindow: any, WindowChangeWorkspace: any, Spotlight: any, exec: any) {

    //if(!(keycodes[String(key)])) return

    let key_name: string = keycodes[keycode]?.[0] || 'unknown';
    const modkey: any = 0x40

    if ((mods & modkey) !== 0) {
        switch(key_name) {
            case 'XK_Return':
                exec('kitty')
                break
            case 'XK_q':
                DestroyWindow(event.wid, X, root, clients)
                Tile(X, root, clients, resolution, variables)
                break
            case 'XK_r':
                exec('dmenu_run')
                break
            case 'XK_Delete':
                exec('killall bun')
                break
            case 'XK_Left':
                ChangeFocus(X, -1, clients, variables)
                break
            case 'XK_Right':
                ChangeFocus(X, 1, clients, variables)
                break
            case 'XK_1':
            case 'XK_2':
            case 'XK_3':
            case 'XK_4':
            case 'XK_5':
            case 'XK_6':
            case 'XK_7':
            case 'XK_8':
            case 'XK_9':
                ChangeWorkspace(key_name, X, clients, variables)
                Tile(X, root, clients, resolution, variables)
                break
            case 'XK_F10':
                Spotlight(X, clients, variables, resolution)
                break
        }
    }

    if(state == modkey + 1) {
        switch(key_name) {
            case 'XK_o':
                IncMasters(variables, 1)
                Tile(X, root, clients, resolution, variables)
                break
            case 'XK_p':
                IncMasters(variables, -1)
                Tile(X, root, clients, resolution, variables)
                break
            case 'XK_Left':
                MoveWindow(event.wid, clients, variables, -1)
                Tile(X, root, clients, resolution, variables)
                X.SetInputFocus(event.wid, 0, 0)
                break
            case 'XK_Right':
                MoveWindow(event.wid, clients, variables, 1)
                Tile(X, root, clients, resolution, variables)
                X.SetInputFocus(event.wid, 0, 0)
                break
            case 'XK_1':
            case 'XK_2':
            case 'XK_3':
            case 'XK_4':
            case 'XK_5':
            case 'XK_6':
            case 'XK_7':
            case 'XK_8':
            case 'XK_9':
                WindowChangeWorkspace(key_name, X, clients, variables, event.wid)
                Tile(X, root, clients, resolution, variables)
                break
        }
    }
}
